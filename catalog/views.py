# catalog/views.py

import json
from django.db.models import Q, Count, Min, Max, F, Prefetch
from django.db.models.functions import Coalesce
from django.templatetags.static import static
from urllib.parse import urlparse, parse_qs

from rest_framework.response import Response
from rest_framework import permissions, generics
from rest_framework.generics import ListAPIView, RetrieveAPIView, ListCreateAPIView
from rest_framework.views import APIView
from rest_framework.pagination import PageNumberPagination
from math import ceil


from .models import Product, Category, FeatureValue, Review, Tag
from .serializers import (
    CategorySerializer,
    ProductShortSerializer,
    ProductFullSerializer,
    ReviewCreateSerializer,
    TagSerializer,
    ProductImageSerializer,   # –¥–ª—è –ø—Ä–µ—Ñ–µ—Ç—á–∞ –Ω–µ –Ω—É–∂–µ–Ω, –Ω–æ –∏–º–ø–æ—Ä—Ç –Ω–µ –º–µ—à–∞–µ—Ç
)

# --------- helpers ---------
def _parse_bool(val):
    if val is None:
        return None
    return str(val).lower() in ("1", "true", "yes", "y", "on")


# --------- –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---------
class CategoryListView(ListAPIView):
    serializer_class = CategorySerializer
    permission_classes = [permissions.AllowAny]
    pagination_class = None  # —Ñ—Ä–æ–Ω—Ç –∂–¥—ë—Ç –ø—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤

    def get_queryset(self):
        return (
            Category.objects.filter(is_active=True, parent__isnull=True)
            .prefetch_related('children')
            .order_by('id')
        )

class CatalogPagination(PageNumberPagination):
    page_size_query_param = "limit"  # —Ñ—Ä–æ–Ω—Ç –ø–µ—Ä–µ–¥–∞—ë—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä limit
    page_query_param = "currentPage"  # —Ñ—Ä–æ–Ω—Ç –ø–µ—Ä–µ–¥–∞—ë—Ç currentPage
    page_size = 20  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

class ProductListView(ListAPIView):
    """
    GET /api/catalog ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –ø–æ Swagger.
    """
    serializer_class = ProductShortSerializer
    permission_classes = [permissions.AllowAny]
    pagination_class = CatalogPagination

    import json

    def get_queryset(self):
        qs = (
            Product.objects
            .select_related("category", "brand")
            .prefetch_related("images", "tags", "feature_value")
            .annotate(
                reviews_count=Count("reviews", distinct=True),
                popularity=Coalesce(F("purchases_count"), 0),
            )
        )

        params = self.request.GET.copy()
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
        search_name = (
                params.get('filter[name]') or
                params.get('filter') or
                params.get('name')
        )

        if search_name:
            print("SEARCH:", search_name)  # –≤—Ä–µ–º–µ–Ω–Ω–æ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è
            qs = qs.filter(title__icontains=search_name.strip())

        # üîπ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º filter[name], filter[minPrice] –∏ —Ç.–¥. –≤ –æ–±—ã—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        filter_data = params.get('filter', {})
        # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é ?filter=Asus
        if isinstance(filter_data, str):
            qs = qs.filter(title__icontains=filter_data)

        for key, value in params.items():
            if key.startswith("filter[") and key.endswith("]"):
                field = key[len("filter["):-1]
                filter_data[field] = value

        # üîπ –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        params.update(filter_data)

        cat = params.get("category")
        name = params.get("name")
        min_price = params.get("minPrice")
        max_price = params.get("maxPrice")
        free_delivery = _parse_bool(params.get("freeDelivery"))
        available = _parse_bool(params.get("available"))

        if cat:
            qs = qs.filter(category_id=cat)
        if name:
            qs = qs.filter(title__icontains=name)
        if min_price:
            qs = qs.filter(price__gte=min_price)
        if max_price:
            qs = qs.filter(price__lte=max_price)
        if free_delivery:
            qs = qs.filter(free_delivery=True)
        if available:
            qs = qs.filter(count__gt=0)
            # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ø–æ–ª—é title (?filter=MacBook)
            search_text = params.get("filter")
            if search_text:
                qs = qs.filter(title__icontains=search_text)

        # üîπ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        sort_field = params.get("sort", "date")
        sort_type = params.get("sortType", "dec")

        mapping = {
            "rating": "rating",
            "price": "price",
            "reviews": "reviews_count",
            "date": "created_at",
        }

        if sort_field in mapping:
            field = mapping[sort_field]
            if sort_type == "dec":
                field = f"-{field}"
            qs = qs.order_by(field, "-id")

        print("FILTER DATA:", filter_data)
        print("FINAL PARAMS:", params)
        print("RESULT COUNT:", qs.count())
        print("ALL PRODUCTS COUNT:", Product.objects.count())
        print("ACTIVE PRODUCTS COUNT:", Product.objects.filter(count__gt=0).count())

        return qs

    def list(self, request, *args, **kwargs):
        queryset = self.get_queryset()
        page = self.paginate_queryset(queryset)

        if page is not None:
            serializer = self.get_serializer(page, many=True)
            pagination = self.paginator
            return Response({
                "items": serializer.data,
                "currentPage": pagination.page.number,
                "lastPage": pagination.page.paginator.num_pages,
            })

        serializer = self.get_serializer(queryset, many=True)
        return Response({"items": serializer.data})


# --------- —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–∞ (–º–∏–Ω–∏–º—É–º –±—Ä–µ–Ω–¥—ã/—Ü–µ–Ω—ã) ---------
class ProductFiltersView(APIView):
    """
    GET /api/products/filters/ ‚Äî –±—Ä–µ–Ω–¥—ã –∏ –º–∏–Ω/–º–∞–∫—Å —Ü–µ–Ω—ã (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞).
    """
    permission_classes = [permissions.AllowAny]

    def get(self, request):
        agg = Product.objects.aggregate(
            min_price=Min("price"),
            max_price=Max("price"),
        )
        # –±—Ä–µ–Ω–¥—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤
        brands_qs = (
            Product.objects.values("brand__name")
            .annotate(products_count=Count("id"))
            .order_by("brand__name")
        )
        brands = [
            {"name": b["brand__name"] or "", "products_count": b["products_count"]}
            for b in brands_qs
        ]
        data = {"brands": brands, "min_price": agg["min_price"] or 0, "max_price": agg["max_price"] or 0}
        return Response(data)


# --------- –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ/–ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (ProductShort) ---------
class LimitedProductsView(ListAPIView):
    serializer_class = ProductShortSerializer
    permission_classes = [permissions.AllowAny]
    pagination_class = None

    def get_queryset(self):
        return (
            Product.objects
            .filter(is_limited=True, category__is_active=True)
            .select_related("category", "brand")
            .prefetch_related("images", "tags")
            .order_by("-id")[:12]
        )


class PopularProductsView(ListAPIView):
    serializer_class = ProductShortSerializer
    permission_classes = [permissions.AllowAny]
    pagination_class = None

    def get_queryset(self):
        return (
            Product.objects
            .filter(category__is_active=True)
            .select_related("category", "brand")
            .prefetch_related("images", "tags")
            .order_by("-purchases_count")[:12]
        )


# --------- —Ç–µ–≥–∏ ---------
class TagListView(ListAPIView):
    queryset = Tag.objects.all().order_by("name")
    serializer_class = TagSerializer
    permission_classes = [permissions.AllowAny]


# --------- –¥–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ (ProductFull) ---------
class ProductDetailByIdView(RetrieveAPIView):
    serializer_class = ProductFullSerializer
    lookup_field = "pk"
    permission_classes =  [permissions.AllowAny]

    def get_queryset(self):
        reviews_qs = Review.objects.select_related("user").order_by("-created_at")

        return (
            Product.objects
            .select_related("category", "brand")
            .prefetch_related(
                "images",
                Prefetch("feature_value", queryset=FeatureValue.objects.select_related("features")),
                Prefetch("reviews", queryset=reviews_qs),   # –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –Ω–µ—Ç related_name
                "tags",
            )
        )


# --------- –æ—Ç–∑—ã–≤—ã: —Å–ø–∏—Å–æ–∫+—Å–æ–∑–¥–∞–Ω–∏–µ ---------
class ReviewPagination:  # –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è ‚Äî DRF PageNumberPagination –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å
    page_size = 5

class ProductReviewCreateView(generics.CreateAPIView):
    """
    POST /api/product/<id>/review/
    –°–æ–∑–¥–∞—Ç—å –æ—Ç–∑—ã–≤ –∫ —Ç–æ–≤–∞—Ä—É.
    –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (user –±–µ—Ä—ë—Ç—Å—è –∏–∑ request.user).
    """
    serializer_class = ReviewCreateSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_product(self):
        return Product.objects.get(pk=self.kwargs["pk"])

    def get_serializer_context(self):
        ctx = super().get_serializer_context()
        ctx["product"] = self.get_product()   # –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ¬´–æ–¥–∏–Ω –æ—Ç–∑—ã–≤ –Ω–∞ —Ç–æ–≤–∞—Ä¬ª
        return ctx

    def perform_create(self, serializer):
        product = self.get_product()
        serializer.save(product=product, user=self.request.user)


# --------- –±–∞–Ω–Ω–µ—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–π ---------
class BannersView(APIView):
    permission_classes = [permissions.AllowAny]

    def get(self, request, *args, **kwargs):
        static_imgs = [
            "frontend/assets/img/content/home/slider.png",
            "frontend/assets/img/content/home/bigGoods.png",
            "frontend/assets/img/content/home/videoca.png",
        ]

        categories = (
            Category.objects
            .filter(is_active=True, parent__isnull=True)
            .order_by("id")[:3]
        )

        banners = []
        for i, cat in enumerate(categories):
            # –Ω–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            products = Product.objects.filter(category=cat)
            min_price = products.aggregate(Min("price"))["price__min"]

            img_path = static_imgs[i % len(static_imgs)]
            banners.append({
                "id": cat.id,
                "title": cat.name,
                "price": min_price or 0,
                "images": [{"src": static(img_path), "alt": cat.name}],
                "link": f"/catalog?category={cat.id}",
                "category": cat.id,
                "category_slug": getattr(cat, "slug", "") or "",
            })

        return Response(banners)